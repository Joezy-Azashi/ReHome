# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

name: $(Build.SourceBranchName)_$(Date:yyyyMMdd).$(Build.BuildId)
pool: "Default"

trigger:
  branches:
    include:
      - master

pr: none

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7549b963-e4c8-4596-a2ac-5ea6e5788d78'
  imageRepository: 'rehomefrontend-prod'
  containerRegistry: 'acrrehomedev.azurecr.io'
  dockerfilePath: '**/Dockerfile_prod'
  tag: '$(Build.BuildNumber)'
  imagePullSecret: 'acrrehomedev1465d7e0-auth'

stages:
  - stage: codereview
    displayName: Running Code Review
    jobs:
      - job: Lint
        displayName: Run tasks
        pool: 'Default'
        timeoutInMinutes: 30 # how long to run the job before automatically cancelling
        cancelTimeoutInMinutes: 2 # how much time to give 'run always even if cancelled tasks' before stopping them
        steps:
          - bash: |
              content=$(wget http://ifconfig.me/ip -q -O -)
              echo $content
            displayName: Get Agent Public IP

          - task: NodeTool@0
            inputs:
              versionSpec: '18.16.0'
            displayName: 'Install Node.js'
          - script: |
              npm install
            displayName: 'Install packages'

          - task: Npm@1
            displayName: 'npm audit'
            inputs:
              command: custom
              customCommand: 'audit --audit-level=high --registry=https://registry.npmjs.org/'
  - stage: Build
    displayName: Build and push stage
    jobs:
    - job: Build
      displayName: Build
      pool: 'Default'
      timeoutInMinutes: 60 # how long to run the job before automatically cancelling
      cancelTimeoutInMinutes: 2 # how much time to give 'run always even if cancelled tasks' before stopping them
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)

      - upload: manifests-prod
        artifact: manifests-prod
  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy
      pool: 'Default'
      timeoutInMinutes: 10 # how long to run the job before automatically cancelling
      cancelTimeoutInMinutes: 2 # how much time to give 'run always even if cancelled tasks' before stopping them
      environment: 'Production.prod'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: createSecret
                secretName: $(imagePullSecret)
                dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: deploy
                manifests: |
                  $(Pipeline.Workspace)/manifests-prod/environment-variables.yml
                  $(Pipeline.Workspace)/manifests-prod/deployment.yml
                  $(Pipeline.Workspace)/manifests-prod/service.yml
                imagePullSecrets: |
                  $(imagePullSecret)
                containers: |
                  $(containerRegistry)/$(imageRepository):$(tag)

